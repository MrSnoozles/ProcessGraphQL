<?php namespace ProcessWire;

use Youshido\GraphQL\Execution\Processor;
use Youshido\GraphQL\Type\Object\ObjectType;
use Youshido\GraphQL\Type\Scalar\StringType;
use ProcessWire\GraphQL\Schema;

class GraphQL extends WireData implements Module {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(
			'title' => 'GraphQL',
			'version' => 001, 
			'summary' => 'GraphQL for ProcessWire.',
			'href' => 'https://github.com/dadish/pw-graphql',
			'singular' => true, 
			'autoload' => false, 
			);
	}

	/**
	 * Files that need to be loaded
	 */
	protected $files = [
		'vendor/autoload',
		'src/Functions',
		'src/Type/TemplateObject',
		'src/Field/Template',
		'src/Schema',
	];

	/**
	 * Bootstrap the module
	 * 
	 * 
	 */
	public function init()
	{
		$this->loadFiles();
	}

	/**
	 * Loads the composed vendor library
	 * 
	 */
	public function loadFiles()
	{
		foreach ($this->files as $file) {
			require_once $this->config->paths->site . 'modules/GraphQL/' . $file . '.php';
		}
	}

	public function execute()
	{
		// instantiating Processor and setting the schema
		$processor = new Processor(new Schema());

		if (isset($_SERVER['CONTENT_TYPE']) && $_SERVER['CONTENT_TYPE'] === 'application/json') {
				$rawBody     = file_get_contents('php://input');
				$requestData = json_decode($rawBody ?: '', true);
		} else {
				$requestData = $_POST;
		}
		$payload   = isset($requestData['query']) ? $requestData['query'] : null;
		$variables = isset($requestData['variables']) ? $requestData['variables'] : null;
		$response = $processor->processPayload($payload, $variables)->getResponseData();
		header('Content-Type: application/json');
		echo json_encode($response);
	}
  
}
