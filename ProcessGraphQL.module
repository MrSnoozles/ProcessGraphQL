<?php namespace ProcessWire;

use Youshido\GraphQL\Execution\Processor;
use ProcessWire\GraphQL\Schema;

class ProcessGraphQL extends Process implements Module {

	const pageName = 'graphql';

	public static function getModuleInfo()
	{
		return array(
			'title' => 'GraphQL',
			'version' => '0.8.0', 
			'summary' => 'GraphQL for ProcessWire.',
			'href' => 'https://github.com/dadish/ProcessGraphql',
			'singular' => true, 
			'autoload' => false, 
			'icon' => 'object-group',
			);
	}

	/**
	 * Bootstrap the module
	 */
	public function init()
	{
		require_once $this->config->paths->site . 'modules/ProcessGraphQL/vendor/autoload.php';
	}

  public function ___execute()
  {
    if ($this->config->ajax) return $this->executeGraphQL();
		return $this->executeGraphiQLPartial();
  }

  public function executeGraphiQL()
  {
    $fullFilename = $this->config->paths->site . 'modules/ProcessGraphQL/GraphiQL/full.php';
		return wireRenderFile($fullFilename, $this->getGraphiQLVariables());
  }

	public function executeGraphiQLPartial()
	{
		$partialFilename = $this->config->paths->site . 'modules/ProcessGraphQL/GraphiQL/partial.php';
		return wireRenderFile($partialFilename, $this->getGraphiQLVariables());
	}

	public function getGraphiQLVariables()
	{
		$js = $this->getGraphiQLAsset('js/main.059c7daf.js');
		$css = $this->getGraphiQLAsset('css/main.a7124171.css');
		$url = $this->GraphQLServerUrl;
		if (!$url) $url = $this->pages->get('template=admin, name=' . self::pageName)->url;
		return [
			'JavaScript' => $js,
			'CSS' => $css,
			'GraphQLServerUrl' => $url,
			'fullWidth' => $this->fullWidthGraphiQL,
		];
	}

	public function getGraphiQLAsset($path)
	{
		$assetFilename = $this->config->paths->site . 'modules/ProcessGraphQL/GraphiQL/build/static/' . $path;
		return wireRenderFile($assetFilename);
	}

	public function executeGraphQL()
	{
		// instantiating Processor and setting the schema
		$processor = new Processor(new Schema());

		if (isset($_SERVER['CONTENT_TYPE']) && $_SERVER['CONTENT_TYPE'] === 'application/json') {
				$rawBody     = file_get_contents('php://input');
				$requestData = json_decode($rawBody ?: '', true);
		} else {
				$requestData = $_POST;
		}
		$payload   = isset($requestData['query']) ? $requestData['query'] : null;
		$variables = isset($requestData['variables']) ? $requestData['variables'] : null;
		$response = $processor->processPayload($payload, $variables)->getResponseData();
		header('Content-Type: application/json');
		return json_encode($response);
	}

	/**
	 * Install the module page under setup
	 *
	 */
	public function ___install()
	{
		// create the page
		$page = new Page();
		$page->template = 'admin';
		$page->name = self::pageName;

		// set parent to the home->admin->setup
		$page->parent = $this->pages->get($this->config->adminRootPageID)->child('name=setup');
		$page->process = $this;

		// set the page title as module title
		$info = self::getModuleInfo();
		$page->title = $info['title'];

		// save the page and tell the user about it
		$page->save();
		$this->message("Created page at: {$page->path}");
	}

	public function ___uninstall()
	{
		// find page by process field
		$moduleID = $this->modules->getModuleID($this);
		$page = $this->pages->get("process=$moduleID, name=" . self::pageName);

		// if the page exists then delete it and tell the user about it
		if ($page->id) {
			$this->message("Deleting page: {$page->path}");
			$page->delete();
		}
	}

}
